name: Build Windows Installer

# Workflow to build Windows installer for Dienstplan Splitter Virtual Printer
on:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
      - feature/virtual-printer

# Add explicit permissions
permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15  # Set maximum job runtime

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full clone to ensure we have all branches
        ref: ${{ github.ref }}  # Explicitly checkout the triggering ref

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'  # Enable pip caching

    - name: Clean build directories
      shell: cmd
      run: |
        if exist "build" rd /s /q "build"
        if exist "dist" rd /s /q "dist"
        if exist "*.spec" del /f /q "*.spec"

    - name: Install dependencies
      shell: cmd
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir pyinstaller==6.1.0
        pip install --no-cache-dir pywin32==306
        pip install --no-cache-dir watchdog==3.0.0
      timeout-minutes: 5  # Set timeout for dependency installation

    - name: Create Version File
      shell: cmd
      run: |
        echo %GITHUB_SHA% > version.txt
        echo %GITHUB_REF% >> version.txt

    - name: Build installer
      shell: cmd
      timeout-minutes: 5  # Set timeout for build process
      run: |
        echo "Starting installer build..."
        pyinstaller --clean --onefile ^
          --add-data "version.txt;." ^
          --add-data "src/printer_service;src/printer_service" ^
          --add-data "src/core;src/core" ^
          --add-data "src/gui;src/gui" ^
          --icon=icon.png ^
          --name dienstplan_splitter_printer_setup ^
          --uac-admin ^
          --noconsole ^
          --paths "src" ^
          src/manage_printer.py
        echo "Installer build completed."

    - name: Verify build output
      shell: cmd
      run: |
        echo "Checking build output..."
        dir dist
        if not exist "dist\dienstplan_splitter_printer_setup.exe" (
          echo Error: Installer not found in dist directory
          exit /b 1
        )
        echo "Build verification completed."

    - name: Upload installer as artifact
      if: success()  # Only run if previous steps succeeded
      uses: actions/upload-artifact@v4
      with:
        name: dienstplan-splitter-printer-setup
        path: dist/dienstplan_splitter_printer_setup.exe
        retention-days: 5  # Keep artifacts for 5 days

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: DienstplanSplitter Virtual Printer ${{ github.ref_name }}
        draft: false
        prerelease: true
        files: |
          dist/dienstplan_splitter_printer_setup.exe
        body: |
          ## DienstplanSplitter Virtual Printer ${{ github.ref_name }}
          
          ### Installation
          1. Installer herunterladen (`dienstplan_splitter_printer_setup.exe`)
          2. Als Administrator ausführen
          3. Der virtuelle Drucker wird automatisch installiert
          
          ### Deinstallation
          1. Installer erneut als Administrator ausführen
          2. `uninstall` auswählen 